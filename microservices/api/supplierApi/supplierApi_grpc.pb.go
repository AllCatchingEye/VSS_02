// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: microservices/api/supplierApi/supplierApi.proto

package supplierApi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SupplierService_AddSupplier_FullMethodName    = "/supplierApi.SupplierService/AddSupplier"
	SupplierService_GetSupplier_FullMethodName    = "/supplierApi.SupplierService/GetSupplier"
	SupplierService_RemoveSupplier_FullMethodName = "/supplierApi.SupplierService/RemoveSupplier"
	SupplierService_AddProducts_FullMethodName    = "/supplierApi.SupplierService/AddProducts"
	SupplierService_RemoveProducts_FullMethodName = "/supplierApi.SupplierService/RemoveProducts"
	SupplierService_OrderProduct_FullMethodName   = "/supplierApi.SupplierService/OrderProduct"
)

// SupplierServiceClient is the client API for SupplierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupplierServiceClient interface {
	AddSupplier(ctx context.Context, in *AddSupplierRequest, opts ...grpc.CallOption) (*AddSupplierReply, error)
	GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierReply, error)
	RemoveSupplier(ctx context.Context, in *RemoveSupplierRequest, opts ...grpc.CallOption) (*RemoveSupplierReply, error)
	AddProducts(ctx context.Context, in *AddProductsRequest, opts ...grpc.CallOption) (*AddProductsReply, error)
	RemoveProducts(ctx context.Context, in *RemoveProductsRequest, opts ...grpc.CallOption) (*RemoveProductsReply, error)
	OrderProduct(ctx context.Context, in *OrderProductRequest, opts ...grpc.CallOption) (*OrderProductReply, error)
}

type supplierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupplierServiceClient(cc grpc.ClientConnInterface) SupplierServiceClient {
	return &supplierServiceClient{cc}
}

func (c *supplierServiceClient) AddSupplier(ctx context.Context, in *AddSupplierRequest, opts ...grpc.CallOption) (*AddSupplierReply, error) {
	out := new(AddSupplierReply)
	err := c.cc.Invoke(ctx, SupplierService_AddSupplier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) GetSupplier(ctx context.Context, in *GetSupplierRequest, opts ...grpc.CallOption) (*GetSupplierReply, error) {
	out := new(GetSupplierReply)
	err := c.cc.Invoke(ctx, SupplierService_GetSupplier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) RemoveSupplier(ctx context.Context, in *RemoveSupplierRequest, opts ...grpc.CallOption) (*RemoveSupplierReply, error) {
	out := new(RemoveSupplierReply)
	err := c.cc.Invoke(ctx, SupplierService_RemoveSupplier_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) AddProducts(ctx context.Context, in *AddProductsRequest, opts ...grpc.CallOption) (*AddProductsReply, error) {
	out := new(AddProductsReply)
	err := c.cc.Invoke(ctx, SupplierService_AddProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) RemoveProducts(ctx context.Context, in *RemoveProductsRequest, opts ...grpc.CallOption) (*RemoveProductsReply, error) {
	out := new(RemoveProductsReply)
	err := c.cc.Invoke(ctx, SupplierService_RemoveProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplierServiceClient) OrderProduct(ctx context.Context, in *OrderProductRequest, opts ...grpc.CallOption) (*OrderProductReply, error) {
	out := new(OrderProductReply)
	err := c.cc.Invoke(ctx, SupplierService_OrderProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupplierServiceServer is the server API for SupplierService service.
// All implementations must embed UnimplementedSupplierServiceServer
// for forward compatibility
type SupplierServiceServer interface {
	AddSupplier(context.Context, *AddSupplierRequest) (*AddSupplierReply, error)
	GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierReply, error)
	RemoveSupplier(context.Context, *RemoveSupplierRequest) (*RemoveSupplierReply, error)
	AddProducts(context.Context, *AddProductsRequest) (*AddProductsReply, error)
	RemoveProducts(context.Context, *RemoveProductsRequest) (*RemoveProductsReply, error)
	OrderProduct(context.Context, *OrderProductRequest) (*OrderProductReply, error)
	mustEmbedUnimplementedSupplierServiceServer()
}

// UnimplementedSupplierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSupplierServiceServer struct {
}

func (UnimplementedSupplierServiceServer) AddSupplier(context.Context, *AddSupplierRequest) (*AddSupplierReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) GetSupplier(context.Context, *GetSupplierRequest) (*GetSupplierReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) RemoveSupplier(context.Context, *RemoveSupplierRequest) (*RemoveSupplierReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSupplier not implemented")
}
func (UnimplementedSupplierServiceServer) AddProducts(context.Context, *AddProductsRequest) (*AddProductsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProducts not implemented")
}
func (UnimplementedSupplierServiceServer) RemoveProducts(context.Context, *RemoveProductsRequest) (*RemoveProductsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProducts not implemented")
}
func (UnimplementedSupplierServiceServer) OrderProduct(context.Context, *OrderProductRequest) (*OrderProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderProduct not implemented")
}
func (UnimplementedSupplierServiceServer) mustEmbedUnimplementedSupplierServiceServer() {}

// UnsafeSupplierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupplierServiceServer will
// result in compilation errors.
type UnsafeSupplierServiceServer interface {
	mustEmbedUnimplementedSupplierServiceServer()
}

func RegisterSupplierServiceServer(s grpc.ServiceRegistrar, srv SupplierServiceServer) {
	s.RegisterService(&SupplierService_ServiceDesc, srv)
}

func _SupplierService_AddSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).AddSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_AddSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).AddSupplier(ctx, req.(*AddSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_GetSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).GetSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_GetSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).GetSupplier(ctx, req.(*GetSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_RemoveSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).RemoveSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_RemoveSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).RemoveSupplier(ctx, req.(*RemoveSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_AddProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).AddProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_AddProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).AddProducts(ctx, req.(*AddProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_RemoveProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).RemoveProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_RemoveProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).RemoveProducts(ctx, req.(*RemoveProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplierService_OrderProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplierServiceServer).OrderProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplierService_OrderProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplierServiceServer).OrderProduct(ctx, req.(*OrderProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SupplierService_ServiceDesc is the grpc.ServiceDesc for SupplierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupplierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supplierApi.SupplierService",
	HandlerType: (*SupplierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSupplier",
			Handler:    _SupplierService_AddSupplier_Handler,
		},
		{
			MethodName: "GetSupplier",
			Handler:    _SupplierService_GetSupplier_Handler,
		},
		{
			MethodName: "RemoveSupplier",
			Handler:    _SupplierService_RemoveSupplier_Handler,
		},
		{
			MethodName: "AddProducts",
			Handler:    _SupplierService_AddProducts_Handler,
		},
		{
			MethodName: "RemoveProducts",
			Handler:    _SupplierService_RemoveProducts_Handler,
		},
		{
			MethodName: "OrderProduct",
			Handler:    _SupplierService_OrderProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microservices/api/supplierApi/supplierApi.proto",
}
